apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

import java.util.regex.Pattern

def outDir = project.buildDir

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'

    defaultConfig {
        applicationId "com.fezrestia.android.webviewwindow"
        minSdkVersion 29
        targetSdkVersion 31
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    task incrementVersionCode {
        def file = file("src/main/AndroidManifest.xml")
        def text = file.getText()

        // Update version code.
        def codePattern = Pattern.compile("android:versionCode=\"(\\d+)\"")
        def codeMatcher = codePattern.matcher(text)
        codeMatcher.find()
        def code = Integer.parseInt(codeMatcher.group(1))
        def newCode = code + 1
        def codeUpdatedText = codeMatcher.replaceAll("android:versionCode=\"" + newCode + "\"")

        // Update version name.
        def namePattern = Pattern.compile("android:versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)-\\d+\"")
        def nameMatcher = namePattern.matcher(codeUpdatedText)
        nameMatcher.find()
        def major = Integer.parseInt(nameMatcher.group(1))
        def minor = Integer.parseInt(nameMatcher.group(2))
        def patch = Integer.parseInt(nameMatcher.group(3))
        def newName = "android:versionName=\"" + major + "." + minor + "." + patch + "-" + newCode + "\""
        def nameUpdatedText = nameMatcher.replaceAll(newName)

        file.write(nameUpdatedText)
    }

    tasks.whenTaskAdded { task ->
        if (task.name == "generateReleaseBuildConfig" || task.name == "generateDebugBuildConfig") {
            task.dependsOn("incrementVersionCode")
        }
    }

    // Define APK name and replace.
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFileName.endsWith(".apk")) {
                def name = getArchivesBaseName()
                def ver = variant.versionName

                if (variant.name == "release") {
                    output.outputFileName = "${name}_${ver}.apk"
                }
            }
        }
    }

    productFlavors {
    }

    lintOptions {
        lintConfig file("lint.xml")
        htmlOutput file("$outDir/reports/test-results-lint.html")
        xmlOutput file("$outDir/reports/test-results-lint.xml")
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.0'
    implementation 'androidx.browser:browser:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'androidx.activity:activity-ktx:1.4.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
}

repositories {
    google()
    mavenCentral()
}
